<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/07/07/%E7%AE%97%E6%B3%95/"/>
      <url>/2023/07/07/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h4 id="逆序数"><a href="#逆序数" class="headerlink" title="逆序数"></a>逆序数</h4><p>idea：使用d[]存每个数的下标，对其排序，按照数值递增排序、值相同的按其下标递增排序。由此得到的是一个已排好序的一组数在原数组中的下标。我们对这个下标进行tree的一系列操作。for从1-n，add操作的d[i]的剩下的所有数中最大的，其下标++，sum操作的d[i]-1，为找到数比a[d[i]-1]&gt;且下标比其小的数的个数，答案即已进去的tr的总和。</p><p>tips：树状数组下标从1开始，</p><p>知识点：离散化、树状数组模板。</p><p>code：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define ll long long</span><br><span class="line">const int N=2e5+10;</span><br><span class="line">int a[N];</span><br><span class="line">int n;</span><br><span class="line">int d[N];</span><br><span class="line">ll tr[N];</span><br><span class="line">bool cmp(int x1,int x2)</span><br><span class="line">&#123;</span><br><span class="line">    if(a[x1]==a[x2]) </span><br><span class="line">       return x1&gt;x2;</span><br><span class="line">    else</span><br><span class="line">       return a[x1]&gt;a[x2];</span><br><span class="line">&#125;</span><br><span class="line">int lowbit(int x)</span><br><span class="line">&#123;</span><br><span class="line">    return x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line">void add(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">//     int u=0;</span><br><span class="line">    for(int i=x;i&lt;=n;i+=lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        tr[i]+=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int sum(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int u=0;</span><br><span class="line">    for(int i=x;i&gt;0;i-=lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        u+=tr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return u;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        d[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=0;</span><br><span class="line">    sort(d+1,d+n+1,cmp);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        add(d[i],1);</span><br><span class="line">        ans+=sum(d[i]-1);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">//已add过的一定是比它大的，而我们在下标中找比这个下标小的个数，一定是满足条件的。</span><br></pre></td></tr></table></figure><h4 id="区间求和"><a href="#区间求和" class="headerlink" title="区间求和"></a>区间求和</h4><p>板子，练习。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define ll long long</span><br><span class="line">const int N=1e6+10;</span><br><span class="line">ll n,q;</span><br><span class="line">ll a[N];</span><br><span class="line">ll tr[N];</span><br><span class="line">ll lowbit(int x)</span><br><span class="line">&#123;</span><br><span class="line">    return x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line">void add(int x,ll y)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=x;i&lt;=n;i+=lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        tr[i]+=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll sum(int x)</span><br><span class="line">&#123;</span><br><span class="line">    ll ans=0;</span><br><span class="line">    for(int i=x;i&gt;0;i-=lowbit(i))</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=tr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        add(i,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    int op,x,y;</span><br><span class="line">    while(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        if(op==1)</span><br><span class="line">        &#123;</span><br><span class="line">            add(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;sum(y)-sum(x-1)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h4 id="最大数"><a href="#最大数" class="headerlink" title="最大数"></a>最大数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define ll long long</span><br><span class="line">int n=0,p,m;</span><br><span class="line">const int N=2e5+10;</span><br><span class="line">ll a[N],d[N];</span><br><span class="line">struct Node&#123;</span><br><span class="line">    int l,r,val;</span><br><span class="line">&#125;tr[N*4];</span><br><span class="line">void update(int u)</span><br><span class="line">&#123;</span><br><span class="line">    tr[u].val=max(tr[u*2].val,tr[u*2+1].val);</span><br><span class="line">&#125;</span><br><span class="line">void build(int id,int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    tr[id]=&#123;l,r&#125;;</span><br><span class="line">    if(l==r)return ;</span><br><span class="line">   int mid=l+r&gt;&gt;1;</span><br><span class="line">        build(id*2,l,mid);</span><br><span class="line">        build(id*2+1,mid+1,r);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">void modify(int id,int u,int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(tr[id].l==u&amp;&amp;tr[id].r==u)</span><br><span class="line">        tr[id].val=x;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        int mid=tr[id].l+tr[id].r&gt;&gt;1;</span><br><span class="line">        if(u&lt;=mid)</span><br><span class="line">            modify(id*2,u,x);</span><br><span class="line">        else</span><br><span class="line">            modify(id*2+1,u, x);</span><br><span class="line">        update(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll query(int id,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    if(tr[id].l&gt;=l&amp;&amp;tr[id].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        return tr[id].val;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid=tr[id].l+tr[id].r &gt;&gt;1;</span><br><span class="line">    ll v=0;</span><br><span class="line">    if(l&lt;=mid)</span><br><span class="line">        v=query(id*2,l,r);</span><br><span class="line">    if(r&gt;mid)</span><br><span class="line">        v=max(v,query(id*2+1,l,r));</span><br><span class="line">    return v;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;p;</span><br><span class="line">    build(1,1,m);</span><br><span class="line">    int last=0;</span><br><span class="line">    char op;</span><br><span class="line">    int u;</span><br><span class="line">    while(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;u;</span><br><span class="line">        if(op==&#x27;A&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            modify(1,n+1,(ll)(u+last)%p);</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            last=query(1,n+1-u,n);</span><br><span class="line">            cout&lt;&lt;last&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="你能回答这些问题吗"><a href="#你能回答这些问题吗" class="headerlink" title="你能回答这些问题吗"></a>你能回答这些问题吗</h4><p>idea：在连续子段和最大值的判断中分为：左边、右边最大字段和、左边的后缀和+右边的前缀和。四个部分取最大值。所以我们定树的属性时：总和、最大字段和、前缀和、后缀和，左子树、右子树。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//维护最大后缀和、最大前缀和、最大子段和、总和,左子树、右子树。数组开四倍</span></span><br><span class="line"><span class="comment">//在建树后更新节点。修改后也要更新节点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> w[N],a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> sum,lmax,rmax,tmax;</span><br><span class="line">&#125;tr[N*<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> k,x,y;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u,Node &amp;l,Node &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u.sum=l.sum+r.sum;</span><br><span class="line">    u.lmax=<span class="built_in">max</span>(l.lmax,l.sum+r.lmax);</span><br><span class="line">    u.rmax=<span class="built_in">max</span>(r.rmax,r.sum+l.rmax);</span><br><span class="line">    u.tmax=<span class="built_in">max</span>(<span class="built_in">max</span>(l.tmax,r.tmax),l.rmax+r.lmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[u],tr[u&lt;&lt;<span class="number">1</span>],tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    tr[u]=&#123;l,r,w[r],w[r],w[r],w[r]&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tr[u]=&#123;l,r&#125;;</span><br><span class="line">        <span class="type">int</span> mid=tr[u].r+tr[u].l&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l==x&amp;&amp;tr[u].r==x)</span><br><span class="line">    tr[u]=&#123;x,x,v,v,v,v&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)</span><br><span class="line">    <span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">            <span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">            Node res;</span><br><span class="line">            <span class="built_in">pushup</span>(res, left, right);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;<span class="comment">//当它在两个之间的话，用一个新节点去获取答案。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;k&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,x,y).tmax&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/2023/07/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/07/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">​```</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Spyder Editor</span><br><span class="line"></span><br><span class="line">This is a temporary script file.</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import numpy</span><br><span class="line"># scipy.special for the sigmoid function expit()</span><br><span class="line">import scipy.special</span><br><span class="line"># library for plotting arrays</span><br><span class="line">import matplotlib.pyplot</span><br><span class="line">class neuralNetwork:</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # initialise the neural network</span><br><span class="line">    def __init__(self, inputnodes, hiddennodes, outputnodes, learningrate):</span><br><span class="line">        # set number of nodes in each input, hidden, output layer</span><br><span class="line">        self.inodes = inputnodes</span><br><span class="line">        self.hnodes = hiddennodes</span><br><span class="line">        self.onodes = outputnodes</span><br><span class="line">        </span><br><span class="line">        # link weight matrices, wih and who</span><br><span class="line">        # weights inside the arrays are w_i_j, where link is from node i to node j in the next layer</span><br><span class="line">        # w11 w21</span><br><span class="line">        # w12 w22 etc </span><br><span class="line">        self.wih = numpy.random.normal(0.0, pow(self.inodes, -0.5), (self.hnodes, self.inodes))</span><br><span class="line">        self.who = numpy.random.normal(0.0, pow(self.hnodes, -0.5), (self.onodes, self.hnodes))</span><br><span class="line"></span><br><span class="line">        # learning rate</span><br><span class="line">        self.lr = learningrate</span><br><span class="line">        </span><br><span class="line">        # activation function is the sigmoid function</span><br><span class="line">        self.activation_function = lambda x: scipy.special.expit(x)</span><br><span class="line">        </span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    # train the neural network</span><br><span class="line">    def train(self, inputs_list, targets_list):</span><br><span class="line">        # convert inputs list to 2d array</span><br><span class="line">        inputs = numpy.array(inputs_list, ndmin=2).T</span><br><span class="line">        targets = numpy.array(targets_list, ndmin=2).T</span><br><span class="line">        </span><br><span class="line">        # calculate signals into hidden layer</span><br><span class="line">        hidden_inputs = numpy.dot(self.wih, inputs)</span><br><span class="line">        # calculate the signals emerging from hidden layer</span><br><span class="line">        hidden_outputs = self.activation_function(hidden_inputs)</span><br><span class="line">        </span><br><span class="line">        # calculate signals into final output layer</span><br><span class="line">        final_inputs = numpy.dot(self.who, hidden_outputs)</span><br><span class="line">        # calculate the signals emerging from final output layer</span><br><span class="line">        final_outputs = self.activation_function(final_inputs)</span><br><span class="line">        </span><br><span class="line">        # output layer error is the (target - actual)</span><br><span class="line">        output_errors = targets - final_outputs</span><br><span class="line">        # hidden layer error is the output_errors, split by weights, recombined at hidden nodes</span><br><span class="line">        hidden_errors = numpy.dot(self.who.T, output_errors) </span><br><span class="line">        </span><br><span class="line">        # update the weights for the links between the hidden and output layers</span><br><span class="line">        self.who += self.lr * numpy.dot((output_errors * final_outputs * (1.0 - final_outputs)), numpy.transpose(hidden_outputs))</span><br><span class="line">        </span><br><span class="line">        # update the weights for the links between the input and hidden layers</span><br><span class="line">        self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs))</span><br><span class="line">        </span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    # query the neural network</span><br><span class="line">    def query(self, inputs_list):</span><br><span class="line">        # convert inputs list to 2d array</span><br><span class="line">        inputs = numpy.array(inputs_list, ndmin=2).T</span><br><span class="line">        </span><br><span class="line">        # calculate signals into hidden layer</span><br><span class="line">        hidden_inputs = numpy.dot(self.wih, inputs)</span><br><span class="line">        # calculate the signals emerging from hidden layer</span><br><span class="line">        hidden_outputs = self.activation_function(hidden_inputs)</span><br><span class="line">        </span><br><span class="line">        # calculate signals into final output layer</span><br><span class="line">        final_inputs = numpy.dot(self.who, hidden_outputs)</span><br><span class="line">        # calculate the signals emerging from final output layer</span><br><span class="line">        final_outputs = self.activation_function(final_inputs)</span><br><span class="line">        </span><br><span class="line">        return final_outputs</span><br><span class="line">    # number of input, hidden and output nodes</span><br><span class="line">input_nodes = 784</span><br><span class="line">hidden_nodes = 100</span><br><span class="line">output_nodes = 10</span><br><span class="line"></span><br><span class="line"># learning rate</span><br><span class="line">learning_rate = 0.1</span><br><span class="line"></span><br><span class="line"># create instance of neural network</span><br><span class="line">n = neuralNetwork(input_nodes,hidden_nodes,output_nodes, learning_rate)</span><br><span class="line"># load the mnist training data CSV file into a list</span><br><span class="line">training_data_file = open(&quot;train.csv&quot;, &#x27;r&#x27;)</span><br><span class="line">training_data_list = training_data_file.readlines()</span><br><span class="line">training_data_file.close()</span><br><span class="line"># train the neural network</span><br><span class="line"></span><br><span class="line"># epochs is the number of times the training data set is used for training</span><br><span class="line">epochs = 50</span><br><span class="line"></span><br><span class="line">for e in range(epochs):</span><br><span class="line">    # go through all records in the training data set</span><br><span class="line">    for record in training_data_list:</span><br><span class="line">        # split the record by the &#x27;,&#x27; commas</span><br><span class="line">        all_values = record.split(&#x27;,&#x27;)</span><br><span class="line">        # scale and shift the inputs</span><br><span class="line">        inputs = (numpy.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01</span><br><span class="line">        # create the target output values (all 0.01, except the desired label which is 0.99)</span><br><span class="line">        targets = numpy.zeros(output_nodes) + 0.01</span><br><span class="line">        # all_values[0] is the target label for this record</span><br><span class="line">        targets[int(all_values[0])] = 0.99</span><br><span class="line">        n.train(inputs, targets)</span><br><span class="line">        pass</span><br><span class="line">    pass</span><br><span class="line"># load the mnist test data CSV file into a list</span><br><span class="line">test_data_file = open(&quot;test.csv&quot;, &#x27;r&#x27;)</span><br><span class="line">test_data_list = test_data_file.readlines()</span><br><span class="line">test_data_file.close()</span><br><span class="line"></span><br><span class="line">all_values=test_data_list[6].split(&#x27;,&#x27;)</span><br><span class="line">print(all_values[0])</span><br><span class="line">image_array=numpy.asfarray(all_values[1:]).reshape((28, 28))</span><br><span class="line">matplotlib.pyplot.imshow(image_array,cmap=&quot;Greys&quot;,interpolation=&quot;None&quot;)</span><br><span class="line">print(n.query((numpy.asfarray(all_values[1:])/255.0*0.99)+0.01))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># test the neural network</span><br><span class="line"></span><br><span class="line"># scorecard for how well the network performs, initially empty</span><br><span class="line">scorecard = []</span><br><span class="line"></span><br><span class="line"># go through all the records in the test data set</span><br><span class="line">for record in test_data_list:</span><br><span class="line">    # split the record by the &#x27;,&#x27; commas</span><br><span class="line">    all_values = record.split(&#x27;,&#x27;)</span><br><span class="line">    # correct answer is first value</span><br><span class="line">    correct_label = int(all_values[0])</span><br><span class="line">    # scale and shift the inputs</span><br><span class="line">    inputs = (numpy.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01</span><br><span class="line">    # query the network</span><br><span class="line">    outputs = n.query(inputs)</span><br><span class="line">    # the index of the highest value corresponds to the label</span><br><span class="line">    label = numpy.argmax(outputs)</span><br><span class="line">    # append correct or incorrect to list</span><br><span class="line">    if (label == correct_label):</span><br><span class="line">        # network&#x27;s answer matches correct answer, add 1 to scorecard</span><br><span class="line">        scorecard.append(1)</span><br><span class="line">    else:</span><br><span class="line">        # network&#x27;s answer doesn&#x27;t match correct answer, add 0 to scorecard</span><br><span class="line">        scorecard.append(0)</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># calculate the performance score, the fraction of correct answers;计算正确率</span><br><span class="line">scorecard_array = numpy.asarray(scorecard)</span><br><span class="line">print (&quot;performance = &quot;, scorecard_array.sum() / scorecard_array.size)</span><br><span class="line"></span><br><span class="line">​```</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章标题</title>
      <link href="/2023/07/05/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/"/>
      <url>/2023/07/05/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/05/hello-world/"/>
      <url>/2023/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
